{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"Author: Khaled Yousef","metadata":{}},{"cell_type":"markdown","source":"# Preprocessing the images and the labels and preparing them \nCombining the RGB channels using OpenCV + Numpy","metadata":{"id":"BhFgOUwXkKJM"}},{"cell_type":"code","source":"#imports Needed\n\nimport numpy as np\nfrom PIL import Image, ImageFile\nimport pandas as pd\nimport seaborn as sns\nfrom tqdm import tqdm\nimport matplotlib.pyplot as plt\n  \nfrom sklearn.metrics import classification_report, confusion_matrix\n  \n# deep learning libraries\nimport tensorflow as tf\nimport keras\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras import applications\nfrom keras.models import Sequential, load_model\nfrom keras.layers import Conv2D, MaxPooling2D, GlobalAveragePooling2D, Flatten, Dense, Dropout\nfrom keras.preprocessing import image\n  \nimport cv2\n\n\n\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.optim import lr_scheduler\nimport torch.backends.cudnn as cudnn\nimport numpy as np\nimport torchvision\nfrom torchvision import datasets, models, transforms\nimport matplotlib.pyplot as plt\nimport time\nimport os\nimport copy\nimport cv2\n\ncudnn.benchmark = True\nplt.ion() \n  \nimport warnings\nwarnings.filterwarnings('ignore')","metadata":{"id":"wEvM587FujMN","execution":{"iopub.status.busy":"2022-08-20T16:31:03.731866Z","iopub.execute_input":"2022-08-20T16:31:03.732342Z","iopub.status.idle":"2022-08-20T16:31:12.566050Z","shell.execute_reply.started":"2022-08-20T16:31:03.732245Z","shell.execute_reply":"2022-08-20T16:31:12.565152Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"\"\"\"# Only run once to combine channels of images\n#For the training images\nfor image in tqdm(np.arange(9633)):\n  blue = cv2.imread(\"../input/challenge3/images_train/images_train/0\"+str(image+1).zfill(4)+\"_blue.png\", 0)\n  red = cv2.imread(\"../input/challenge3/images_train/images_train/0\"+str(image+1).zfill(4)+\"_red.png\", 0)\n  yellow = cv2.imread(\"../input/challenge3/images_train/images_train/0\"+str(image+1).zfill(4)+\"_yellow.png\", 0)\n  #BGR is used here as open cv uses BGR and not RGB format\n  rgb = np.dstack((blue,yellow,red))\n  rgb_bright = increase_brightness(rgb, value=100)\n  cv2.imwrite(\"/kaggle/working/0\"+str(image+1).zfill(4)+\"_rgb_bright.png\",rgb_bright)\"\"\"","metadata":{"execution":{"iopub.status.busy":"2022-08-20T16:31:12.568993Z","iopub.execute_input":"2022-08-20T16:31:12.569685Z","iopub.status.idle":"2022-08-20T16:31:12.579133Z","shell.execute_reply.started":"2022-08-20T16:31:12.569645Z","shell.execute_reply":"2022-08-20T16:31:12.578396Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"def increase_brightness(img, value=30):\n    hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)\n    h, s, v = cv2.split(hsv)\n\n    lim = 255 - value\n    v[v > lim] = 255\n    v[v <= lim] += value\n\n    final_hsv = cv2.merge((h, s, v))\n    img = cv2.cvtColor(final_hsv, cv2.COLOR_HSV2BGR)\n    return img","metadata":{"execution":{"iopub.status.busy":"2022-08-20T16:31:12.580650Z","iopub.execute_input":"2022-08-20T16:31:12.581299Z","iopub.status.idle":"2022-08-20T16:31:12.598303Z","shell.execute_reply.started":"2022-08-20T16:31:12.581247Z","shell.execute_reply":"2022-08-20T16:31:12.597430Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"\"\"\"frame = increase_brightness(blue, value=100)\ncv2.imwrite(\"/kaggle/working/testbright6.jpg\",frame)\"\"\"","metadata":{"execution":{"iopub.status.busy":"2022-08-20T16:31:12.602582Z","iopub.execute_input":"2022-08-20T16:31:12.603438Z","iopub.status.idle":"2022-08-20T16:31:12.610711Z","shell.execute_reply.started":"2022-08-20T16:31:12.603401Z","shell.execute_reply":"2022-08-20T16:31:12.609860Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"# Only run once to combine channels of images\n#For the training images\n#for image in tqdm(np.arange(1)):\n#  blue = cv2.imread(\"../input/challenge3/images_train/images_train/0\"+str(image+1).zfill(4)+\"_red.png\", 0)\n#  red = cv2.imread(\"../input/challenge3/images_train/images_train/0\"+str(image+1).zfill(4)+\"_yellow.png\", 0)\n#  yellow = cv2.imread(\"../input/challenge3/images_train/images_train/0\"+str(image+1).zfill(4)+\"_blue.png\", 0)\n#  #BGR is used here as open cv uses BGR and not RGB format\n#  rgb = np.dstack((blue,yellow,red))\n#  plt.imshow(rgb)\n  #cv2.imwrite(\"../kaggle/working\"+str(image+1).zfill(4)+\"_rgb.png\",rgb)","metadata":{"id":"2U88cUglDG_C","execution":{"iopub.status.busy":"2022-08-20T16:31:12.612153Z","iopub.execute_input":"2022-08-20T16:31:12.612811Z","iopub.status.idle":"2022-08-20T16:31:12.623048Z","shell.execute_reply.started":"2022-08-20T16:31:12.612776Z","shell.execute_reply":"2022-08-20T16:31:12.622252Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"\"\"\"import shutil\nfor index, image in labels.iterrows():\n    shutil.copy('/content/drive/MyDrive/Microscopy/RGB_IMAGES_BRIGHT_TRAIN/' + image['file_id'], '/content/drive/MyDrive/Microscopy/RGB_IMAGES_BRIGHT_TRAIN/' + image['cell_line'])\"\"\"","metadata":{"execution":{"iopub.status.busy":"2022-08-20T16:31:12.624692Z","iopub.execute_input":"2022-08-20T16:31:12.625357Z","iopub.status.idle":"2022-08-20T16:31:12.634738Z","shell.execute_reply.started":"2022-08-20T16:31:12.625321Z","shell.execute_reply":"2022-08-20T16:31:12.633865Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"markdown","source":"# One hot encoding the labels ","metadata":{"id":"FmXmFij3GY-W"}},{"cell_type":"code","source":"#Changing the file_id to match the name of the combined images id so we can use in the ImageDataGenerator later \nlabels = pd.read_csv(\"../input/y-train-challenge3/y_train.csv\")\ndef append_id(file_id):\n    return \"0\" + str(file_id).zfill(4)+\"_rgb.png\"\n  \nlabels['file_id'] = labels['file_id'].apply(append_id)\n\n# folders paths\ntrain_path = \"../input/rgb-images/RGB_IMAGES_TRAIN\"\ntest_path = \"../input/rgbimagestest/RGB_IMAGES_TEST\"\nlabels.tail()","metadata":{"id":"lbmhTmNzGN7k","outputId":"b7febe9a-a25a-4c70-a337-be9442ef29b1","execution":{"iopub.status.busy":"2022-08-20T16:31:12.636163Z","iopub.execute_input":"2022-08-20T16:31:12.636677Z","iopub.status.idle":"2022-08-20T16:31:12.675186Z","shell.execute_reply.started":"2022-08-20T16:31:12.636643Z","shell.execute_reply":"2022-08-20T16:31:12.674279Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"markdown","source":"# Data Augmentation ","metadata":{}},{"cell_type":"code","source":"# Data augmentation and normalization for training\n# Just normalization for validation\ndata_transforms = {\n    'train': transforms.Compose([\n        transforms.RandomResizedCrop(224),\n        transforms.RandomHorizontalFlip(),\n        transforms.RandomVerticalFlip(),\n        transforms.ToTensor(),\n        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n    ]),\n    'val': transforms.Compose([\n        transforms.Resize(256),\n        transforms.CenterCrop(224),\n        transforms.RandomVerticalFlip(),\n        transforms.ToTensor(),\n        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n    ]),\n}\n\ndata_dir = '../input/rgb-train-bright/RGB_IMAGES_BRIGHT_TRAIN/'\nimage_datasets = {x: datasets.ImageFolder(data_dir,\n                                          data_transforms[x])\n                  for x in ['train', 'val']}\ndataloaders = {x: torch.utils.data.DataLoader(image_datasets[x], batch_size=4,\n                                             shuffle=True, num_workers=4)\n              for x in ['train', 'val']}\ndataset_sizes = {x: len(image_datasets[x]) for x in ['train', 'val']}\nclass_names = image_datasets['train'].classes\n\ndevice = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")","metadata":{"id":"8em5sjhyrVsJ","outputId":"074efe54-d5c4-45a0-cf27-efe9c5456150","execution":{"iopub.status.busy":"2022-08-20T16:31:12.676804Z","iopub.execute_input":"2022-08-20T16:31:12.677189Z","iopub.status.idle":"2022-08-20T16:31:31.355634Z","shell.execute_reply.started":"2022-08-20T16:31:12.677151Z","shell.execute_reply":"2022-08-20T16:31:31.354744Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"def imshow(inp, title=None):\n    \"\"\"Imshow for Tensor.\"\"\"\n    inp = inp.numpy().transpose((1, 2, 0))\n    mean = np.array([0.485, 0.456, 0.406])\n    std = np.array([0.229, 0.224, 0.225])\n    inp = std * inp + mean\n    inp = np.clip(inp, 0, 1)\n    plt.imshow(inp)\n    if title is not None:\n        plt.title(title)\n    plt.pause(0.001)  # pause a bit so that plots are updated\n\n\n# Get a batch of training data\ninputs, classes = next(iter(dataloaders['train']))\n\n# Make a grid from batch\nout = torchvision.utils.make_grid(inputs)\n\nimshow(out, title=[class_names[x] for x in classes])","metadata":{"id":"oyc-N9c8uF2G","outputId":"69f34e6d-f9c2-4203-8980-f2af6e7c2602","execution":{"iopub.status.busy":"2022-08-20T16:31:31.357130Z","iopub.execute_input":"2022-08-20T16:31:31.357791Z","iopub.status.idle":"2022-08-20T16:31:31.965032Z","shell.execute_reply.started":"2022-08-20T16:31:31.357753Z","shell.execute_reply":"2022-08-20T16:31:31.964120Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"markdown","source":"# Training Routine","metadata":{}},{"cell_type":"code","source":"def train_model(model, criterion, optimizer, scheduler, num_epochs=25):\n    since = time.time()\n\n    best_model_wts = copy.deepcopy(model.state_dict())\n    best_acc = 0.0\n\n    for epoch in range(num_epochs):\n        print(f'Epoch {epoch}/{num_epochs - 1}')\n        print('-' * 10)\n\n        # Each epoch has a training and validation phase\n        for phase in ['train', 'val']:\n            if phase == 'train':\n                model.train()  # Set model to training mode\n            else:\n                model.eval()   # Set model to evaluate mode\n\n            running_loss = 0.0\n            running_corrects = 0\n\n            # Iterate over data.\n            for inputs, labels in dataloaders[phase]:\n                inputs = inputs.to(device)\n                labels = labels.to(device)\n\n                # zero the parameter gradients\n                optimizer.zero_grad()\n\n                # forward\n                # track history if only in train\n                with torch.set_grad_enabled(phase == 'train'):\n                    outputs = model(inputs)\n                    _, preds = torch.max(outputs, 1)\n                    loss = criterion(outputs, labels)\n\n                    # backward + optimize only if in training phase\n                    if phase == 'train':\n                        loss.backward()\n                        optimizer.step()\n\n                # statistics\n                running_loss += loss.item() * inputs.size(0)\n                running_corrects += torch.sum(preds == labels.data)\n            if phase == 'train':\n                scheduler.step()\n\n            epoch_loss = running_loss / dataset_sizes[phase]\n            epoch_acc = running_corrects.double() / dataset_sizes[phase]\n\n            print(f'{phase} Loss: {epoch_loss:.4f} Acc: {epoch_acc:.4f}')\n\n            # deep copy the model\n            if phase == 'val' and epoch_acc > best_acc:\n                best_acc = epoch_acc\n                best_model_wts = copy.deepcopy(model.state_dict())\n                \n            \n    time_elapsed = time.time() - since\n    print(f'Training complete in {time_elapsed // 60:.0f}m {time_elapsed % 60:.0f}s')\n    print(f'Best val Acc: {best_acc:4f}')\n\n    # load best model weights\n    model.load_state_dict(best_model_wts)\n    return model","metadata":{"id":"eWO2aCvcJAR4","outputId":"96bed5b9-5634-494d-a461-9e7108778a85","execution":{"iopub.status.busy":"2022-08-20T16:31:31.969013Z","iopub.execute_input":"2022-08-20T16:31:31.969348Z","iopub.status.idle":"2022-08-20T16:31:31.980908Z","shell.execute_reply.started":"2022-08-20T16:31:31.969317Z","shell.execute_reply":"2022-08-20T16:31:31.979639Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"def visualize_model(model, num_images=6):\n    was_training = model.training\n    model.eval()\n    images_so_far = 0\n    fig = plt.figure()\n\n    with torch.no_grad():\n        for i, (inputs, labels) in enumerate(dataloaders['val']):\n            inputs = inputs.to(device)\n            labels = labels.to(device)\n\n            outputs = model(inputs)\n            _, preds = torch.max(outputs, 1)\n\n            for j in range(inputs.size()[0]):\n                images_so_far += 1\n                ax = plt.subplot(num_images//2, 2, images_so_far)\n                ax.axis('off')\n                ax.set_title(f'predicted: {class_names[preds[j]]}')\n                imshow(inputs.cpu().data[j])\n\n                if images_so_far == num_images:\n                    model.train(mode=was_training)\n                    return\n        model.train(mode=was_training)","metadata":{"id":"QAxIQpgCJByB","execution":{"iopub.status.busy":"2022-08-20T16:31:31.984579Z","iopub.execute_input":"2022-08-20T16:31:31.985466Z","iopub.status.idle":"2022-08-20T16:31:31.995117Z","shell.execute_reply.started":"2022-08-20T16:31:31.985434Z","shell.execute_reply":"2022-08-20T16:31:31.994183Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"img_transforms = transforms.Compose([\n        transforms.RandomResizedCrop(224),\n        transforms.RandomHorizontalFlip(),\n        transforms.RandomVerticalFlip(),\n        transforms.ToTensor(),\n        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n    ])","metadata":{"execution":{"iopub.status.busy":"2022-08-20T16:31:31.997000Z","iopub.execute_input":"2022-08-20T16:31:31.997637Z","iopub.status.idle":"2022-08-20T16:31:32.006679Z","shell.execute_reply.started":"2022-08-20T16:31:31.997598Z","shell.execute_reply":"2022-08-20T16:31:32.005977Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"def predict(model,dir):\n    model.eval()\n    img = Image.open(dir)\n    img = img_transforms(img).to(device)\n    img = torch.unsqueeze(img, 0)\n    prediction = model(img)\n    _, preds = torch.max(prediction, 1)\n    return class_names[preds]","metadata":{"execution":{"iopub.status.busy":"2022-08-20T17:50:49.594330Z","iopub.execute_input":"2022-08-20T17:50:49.594937Z","iopub.status.idle":"2022-08-20T17:50:49.601389Z","shell.execute_reply.started":"2022-08-20T17:50:49.594899Z","shell.execute_reply":"2022-08-20T17:50:49.600135Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"code","source":"#!pip install efficientnet_pytorch\n#from efficientnet_pytorch import EfficientNet\n#model_ft = EfficientNet.from_pretrained('efficientnet-b1')\nmodel_ft = models.resnet50(pretrained=True)\nnum_ftrs = model_ft.fc.in_features\n# Here the size of each output sample is set to 9.\n# Alternatively, it can be generalized to nn.Linear(num_ftrs, len(class_names)).\nmodel_ft.fc = nn.Linear(num_ftrs, 9)\n\nmodel_ft = model_ft.to(device)\n\ncriterion = nn.CrossEntropyLoss()\n\n# Observe that all parameters are being optimized\noptimizer_ft = optim.SGD(model_ft.parameters(), lr=0.001, momentum=0.9)\n\n# Decay LR by a factor of 0.1 every 7 epochs\nexp_lr_scheduler = lr_scheduler.StepLR(optimizer_ft, step_size=7, gamma=0.1)","metadata":{"id":"DBSfNlL_JDLG","execution":{"iopub.status.busy":"2022-08-20T17:50:50.774184Z","iopub.execute_input":"2022-08-20T17:50:50.774867Z","iopub.status.idle":"2022-08-20T17:50:51.385180Z","shell.execute_reply.started":"2022-08-20T17:50:50.774829Z","shell.execute_reply":"2022-08-20T17:50:51.384264Z"},"trusted":true},"execution_count":25,"outputs":[]},{"cell_type":"code","source":"model_ft = train_model(model_ft, criterion, optimizer_ft, exp_lr_scheduler,\n                       num_epochs=25)","metadata":{"id":"TUpL8Myiu3R-","outputId":"18d415dc-cf77-45ba-cd37-eaf5b0f0e16a","execution":{"iopub.status.busy":"2022-08-20T16:31:42.915248Z","iopub.execute_input":"2022-08-20T16:31:42.915628Z","iopub.status.idle":"2022-08-20T17:46:05.264065Z","shell.execute_reply.started":"2022-08-20T16:31:42.915588Z","shell.execute_reply":"2022-08-20T17:46:05.262978Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"visualize_model(model_ft)","metadata":{"execution":{"iopub.status.busy":"2022-08-20T17:46:26.327759Z","iopub.execute_input":"2022-08-20T17:46:26.328201Z","iopub.status.idle":"2022-08-20T17:46:27.464812Z","shell.execute_reply.started":"2022-08-20T17:46:26.328160Z","shell.execute_reply":"2022-08-20T17:46:27.463764Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"markdown","source":"# Training and Predicting ","metadata":{}},{"cell_type":"code","source":"predictions = []\nfor image in tqdm(np.arange(6869)):\n    predictions.append(predict(model_ft,'../input/rgb-images-test-bright/0' + str(image+9632).zfill(4) + \"_rgb_bright.png\"))","metadata":{"execution":{"iopub.status.busy":"2022-08-20T17:47:06.156607Z","iopub.execute_input":"2022-08-20T17:47:06.157000Z","iopub.status.idle":"2022-08-20T17:49:02.279344Z","shell.execute_reply.started":"2022-08-20T17:47:06.156966Z","shell.execute_reply":"2022-08-20T17:49:02.278485Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"code","source":"from collections import Counter\n\nprint(Counter(predictions).keys()) # equals to list(set(words))\nCounter(predictions).values()","metadata":{"execution":{"iopub.status.busy":"2022-08-20T17:51:11.704546Z","iopub.execute_input":"2022-08-20T17:51:11.704919Z","iopub.status.idle":"2022-08-20T17:51:11.713152Z","shell.execute_reply.started":"2022-08-20T17:51:11.704889Z","shell.execute_reply":"2022-08-20T17:51:11.712363Z"},"trusted":true},"execution_count":26,"outputs":[]},{"cell_type":"code","source":"file_id = [*range(9633, 16502, 1)]\nresult = list(zip(file_id,predictions))\nresult = pd.DataFrame(result, columns=['file_id','cell_line'])\nresult","metadata":{"execution":{"iopub.status.busy":"2022-08-20T17:51:24.901353Z","iopub.execute_input":"2022-08-20T17:51:24.901730Z","iopub.status.idle":"2022-08-20T17:51:24.922554Z","shell.execute_reply.started":"2022-08-20T17:51:24.901699Z","shell.execute_reply":"2022-08-20T17:51:24.921259Z"},"trusted":true},"execution_count":28,"outputs":[]},{"cell_type":"code","source":"result.to_csv('result_ails_3_bright.csv',index = False) ","metadata":{"execution":{"iopub.status.busy":"2022-08-20T17:52:11.481621Z","iopub.execute_input":"2022-08-20T17:52:11.482034Z","iopub.status.idle":"2022-08-20T17:52:11.498133Z","shell.execute_reply.started":"2022-08-20T17:52:11.482000Z","shell.execute_reply":"2022-08-20T17:52:11.497344Z"},"trusted":true},"execution_count":29,"outputs":[]}]}